import java.util.Map;import java.util.HashMap;import java.util.List;import java.util.ArrayList;import java.io.File;import java.util.regex.Pattern;public class vad{public static void main(String[]args){;Map<String,String> py_dict=new HashMap<String, String>() {};py_dict.put("extension","py");Map<String,String> java_dict=new HashMap<String, String>() {};java_dict.put("extension","java");Map<String,Map<String,String>> languages=new HashMap<String, Map<String,String>>() {};languages.put("python",py_dict);languages.put("java",java_dict);Validate vd=new Validate(languages);System.out.println(vd.validate_language("java"));System.out.println(vd.validate_file_path("file/path.java"));System.out.println(vd.validate_file_name("file/path.java"));}}class Validate{String lang_from;String lang_to;String in_file;String out_file;Map<String,Map<String,String>> languages;Validate(Map<String,Map<String,String>> languages){this.lang_from="";this.lang_to="";this.in_file="";this.out_file="";this.languages=languages;}String validate_language(String language){language=language.toLowerCase();this.lang_to=language;if(!(this.languages.keySet().contains(language))){return String.format("Unsupported language %s",language);}return null;}String recognize_language(String file_path){String[] file_ext=NGlotHelperFuncs.rsplit(file_path, ".", 1);if(file_ext.length!=2||!!file_ext[1].isEmpty()){return String.valueOf(2);}String file_exta=file_ext[1];for(Map.Entry<String,Map<String,String>> item:this.languages.entrySet()){String lang=item.getKey();Map<String,String> lang_dat=item.getValue();if(lang_dat.get("extension").equals(file_exta)){return lang.toLowerCase();}}return String.valueOf(3);}String validate_file_path(String file_path){if(!((new File(file_path)).exists())){return String.format("File - %s Does not exist",file_path);}this.in_file=file_path;String language=this.recognize_language(file_path);if(!!this.lang_to.isEmpty()){this.lang_from=language;}if(language.equals(String.valueOf(2))){return "Please Add File Extension";}else if(language.equals(String.valueOf(3))){return "Unsupported File Type";}return null;}String validate_file_name(String file_path){this.out_file=file_path;String recognized_language=this.recognize_language(file_path);String file_name=NGlotHelperFuncs.splitext(file_path.split(Pattern.quote(File.separator))[1])[0];String special_characters="\\/:*?\"<>|";for(char character:special_characters.toCharArray()){if(file_name.indexOf(character)!=-1){return String.format("File name must not contain '%s'", special_characters);}}if(!(this.lang_to).equals(recognized_language)){return "Extension and language don't match";}return null;}}class NGlotHelperFuncs {public static String[]rsplit(String base,String sep,int maxsplit) {List<String>splitString=new ArrayList<String>();int prevEnd=base.length();class RSplitHelpers{char[]sepCharArray;RSplitHelpers(){sepCharArray=sep.toCharArray();}public boolean sepFound(char baseChar){for(char sepChar:this.sepCharArray)if(baseChar==sepChar)return true;return false;}}RSplitHelpers rsplitHelpers=new RSplitHelpers();for(int i=base.length()-1;i!=0&&maxsplit!=0;i--) {if(rsplitHelpers.sepFound(base.charAt(i))){splitString.add(0,base.substring(i+1,prevEnd));prevEnd=i;maxsplit-=1;}}if (prevEnd>1)splitString.add(0,base.substring(0,prevEnd));return splitString.toArray(new String[0]);}public static String[]splitext(String filename){int lastDot=filename.lastIndexOf(".");return new String[]{filename.substring(0,lastDot),filename.substring(lastDot)};}}